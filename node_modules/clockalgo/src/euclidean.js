const SourceClock = require("./source_clock");
const helpers     = require("./helpers");


/**
 * A Euclidean clock generator. Given a modulus/divisor and a step count, create a Euclidean pattern
 * of gates that line up with a step less than the step count.
 *
 * For example, a step count of 8 and a divisor of 3 would produce the uneven sequence:
 *
 * Steps: 0 1 2 3 4 5 6 7
 * Gates: *     *     *
 */
class Euclidean extends SourceClock {

    /**
     * Create a new Euclidean clock sequence
     *
     * @param {integer} modulus the Euclidean divisor
     * @param {integer} steps the number of steps in the Euclidean clock sequence
     */
    constructor(modulus, steps) {
        super(steps);

        this.modulus   = modulus;
        this.divisions = helpers.divisionsFromSequence( Euclidean.modulus(this.steps, modulus) );
    }


    /**
     * Generate a Euclidean sequence of on/off gates as an Array of 1's and 0's
     *
     * @param {integer} numSteps number of clock steps
     * @param {integer} modulus Euclidean divisor for steps
     * @returns {Array} an array of on/off (1/0) gates
     */
    static modulus(numSteps, modulus) {
        if (numSteps > modulus) {
            const steps = Array(numSteps).fill(0);
            const stepSize = numSteps / modulus;
            new Array(Math.round(numSteps / stepSize))
                .fill(undefined)
                .map((v, i) => i * stepSize)
                .forEach(gateStep => steps[Math.round(gateStep)] = 1);

            return steps;
        } else {
            return Array(numSteps).fill(1);
        }
    }
}


module.exports = Euclidean;
