const HybridClock = require("./hybrid_clock");


/**
 * Evenly subdivide a clock.
 *
 * For example, the divisions for a clock divided by 4 will have divisions at:
 *
 *      [0, 0.25, 0.5, 0.75]
 */
class Subdivider extends HybridClock {

    /**
     * Create a new Subdivider
     *
     * @param {integer} divisor the divisor that determines how many times each segment will be subdivided
     * @param {integer/clock} stepsOrClock a step count or Clockalgo.js clock object
     */
    constructor(divisor, stepsOrClock) {
        super(stepsOrClock);
        this.divisor = divisor;

        if (typeof stepsOrClock === "number") {

            this.divisions = Subdivider.subDivisionIndices(divisor);

        } else {

            this.divisions = new Array();

            // Clone a copy of the clock's divisions array and append 1.0 so the copy has the end of the loop
            let clockDivisions = stepsOrClock.divisions.slice(0);
            clockDivisions.push(1);

            let offset = 0;
            clockDivisions.forEach((div, i, arr) => {
                if (i < arr.length - 1) {
                    let segmentLength = arr[i + 1] - div;
                    let segmentDivisions = Subdivider.subDivisionIndices(divisor, segmentLength, offset);
                    this.divisions = this.divisions.concat(segmentDivisions);

                    offset += segmentLength;
                }
            });
        }
    }


    /**
     * Divide a single segment (space between divisions) from an array of clock divisions.
     *
     * @param {integer} divisor the divisor that determines how many times a section is divided
     * @param {float} segmentLength a division segment length
     * @param {float} offset the segment offset to be added to any divisions created
     * @returns an array of divisions for a segment
     */
    static subDivisionIndices(divisor, segmentLength, offset) {

        offset = offset == undefined ? 0 : offset;
        segmentLength = segmentLength == undefined ? 1.0 : segmentLength;
        const stepSize = segmentLength / divisor;
        const steps    = Array(divisor);
        for (let i = 0; i < divisor; i++)
            steps[i] = i * stepSize + offset;

        return steps;
    }
}


module.exports = Subdivider;
