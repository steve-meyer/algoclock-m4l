/**
 * Is an object an instance of a clock algorith?
 *
 * @param {any} instance object to check if it is a Clockalgo.js clock algorithm class
 * @returns {boolean} true if it is, otherwise false
 */
const isClock = (instance) => {
    const name = Object.getPrototypeOf(instance.constructor).name;
    return name === "SourceClock" || name === "ClockModifier" || name === "HybridClock";
}


/**
 * Is the variable passed an integer? Used primarily for verifying inputs like step counts.
 *
 * @param {any} value object to check if it is an integer
 * @returns true if it is, otherwise false
 */
const isInteger = (value) => {
    if (isNaN(value)) return false;

    let x = parseFloat(value);
    return (x | 0) === x;
}


/**
 * Generate Clockalgo.js divisions from a gate array of 1's and 0's. Divisions in the clock
 * algorithm system are the positions of on-gates (1's) within the sequence as a decimal
 * between 0 and 1.
 *
 * For example, given either of the following gate sequences
 *
 * [1, 0, 1, 0]
 * [1, 0, 0, 1, 0, 0, 0]
 *
 * This function returns a divisions array of [0, 0.5]
 * @param {Array} sequence an array of 1's and 0's that represents a gate sequence
 * @returns {Array} an array of divisions as floats between 0 and 1
 */
const divisionsFromSequence = (sequence) => {
    return sequence.reduce((divisions, step, i) => {
        if (step == 1) divisions.push(i / sequence.length);
        return divisions;
    }, new Array());
}


module.exports = {
    isClock: isClock,
    isInteger: isInteger,
    divisionsFromSequence: divisionsFromSequence
}
