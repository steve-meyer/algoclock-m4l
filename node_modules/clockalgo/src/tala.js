const SourceClock = require("./source_clock");
const helpers     = require("./helpers");


/**
 * An extremely rudimentary set of Tala patterns.
 */
class Tala extends SourceClock {

    /**
     * Create a new Tala object.
     *
     * Steps should be one of: 6, 7, 8, 10, 12, 14, 16
     *
     * @param {integer} steps number of tala steps
     */
    constructor(steps) {
        super(steps);
        this.divisions = (Tala.defaults[this.steps]) ? helpers.divisionsFromSequence(Tala.defaults[this.steps]) : [0];
    }


    // This is the most ridiculoously rudimentary understanding of talas and only uses major section beats
    // TODO: encode the waves.
    static defaults = {
        // teentaal: 16 beat rhythm cycle, 4 sections of 4 beats. section 3 is the wave.
        16: [1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,  1, 0, 0, 0],
        // ektaal: 12 beat rhythm cycle, 6 sections of 2 beats. sections 2 and 4 are the waves
        12: [1, 0,  0, 0,  1, 0,  0, 0,  1, 0,  1, 0],
        // jhaptaal: 10 beat rhythm cycle, 4 sections of 2, 3, 2, 3 beats. section 3 is the wave.
        10: [1, 0, 1, 0, 0, 0, 0, 1, 0, 0],
        // dhamar: 14 beat rhythm cycle, 4 sections of 5, 2, 3, 4 beats. section 3 is the wave.
        14: [1, 0, 0, 0, 0,  1, 0,  0, 0, 0,  1, 0, 0, 0],
        // keherwa: 8 beat rhythm cycle, 2 sections of 4 beats. section 2 is the wave.
        8: [1, 0, 0, 0,  1, 0, 0, 0],
        // rupak: 7 beat rhythm cycle, 3 sections of 3, 2, 2 beats.
        7: [1, 0, 0,  1, 0,  1, 0],
        // dadra: 6 beat rhythm cycle, 2 sections of 3 beats. section 2 is the wave.
        6: [1, 0, 0,  0, 0, 0]
    }
}


module.exports = Tala;
