const ClockModifier = require("./clock_modifier");


/**
 * Rotate a sequence.
 *
 * A rotation will shift divisions by moving them "to the right" by a specified percentage. Any
 * divisions that have been shifted to a value above 1 will be wrapped around to the beginning.
 */
class Rotation extends ClockModifier {

    static ROT_AMT_GRTH_100_PERCENT_MSG = "Rotation amount must be a percentage between 0 and 1";


    /**
     * Create a new Rotation.
     *
     * @param {float} rotationAmount a rotation amount as a percentage between 0 and 1
     */
    constructor(rotationAmount) {
        super();

        if (typeof rotationAmount !== "number" || rotationAmount < 0 || rotationAmount > 1)
            throw new Error(Rotation.ROT_AMT_GRTH_100_PERCENT_MSG);

        this.rotationAmount = rotationAmount;
    }


    /**
     * Apply the rotation to the given clock.
     *
     * @param {clock} clock the clock that should have its divisions rotated
     */
    applyTo(clock) {
        // clock.divisions = clock.divisions.map(d => (d + this.rotationAmount) % 1).sort();
        clock.divisions = clock.divisions.map(d => {
            let shiftedAmount = (d + this.rotationAmount);
            return shiftedAmount >= 1 ? shiftedAmount - 1 : shiftedAmount;
        }).sort();
    }
}


module.exports = Rotation;
